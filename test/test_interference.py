#!/usr/bin/env python3
import ROOT
import numpy as np
import subprocess


def array2vector_2d(array):
    assert len(array.shape) == 2
    out = ROOT.std.vector["std::vector<double>"]()
    out.reserve(len(array))
    for row in array:
        out.push_back(row)
    return out


def to_TH1(name, array):
    h = ROOT.TH1D(name, name, 20, 250, 1200)
    for i, val in enumerate(array):
        h.SetBinContent(i + 1, val)
    return h


# make some shapes
fout = ROOT.TFile("shapes.root", "recreate")
nom = 100 * np.array(
    [
        0.14253603,
        0.21781641,
        0.22698837,
        0.19603483,
        0.19259561,
        0.15552859,
        0.13909682,
        0.09438712,
        0.08521593,
        0.06878416,
        0.06419854,
        0.04318116,
        0.04776676,
        0.03057073,
        0.02866007,
        0.02292805,
        0.02139951,
        0.02063524,
        0.01222829,
        0.01337466,
    ]
)
obs = nom.copy()

hnom = to_TH1("VBFHH", nom)
for i, val in enumerate(nom):
    hnom.SetBinError(i + 1, np.sqrt(val) * 0.1)
hnom.Write()
to_TH1("VBFHH_jesUp", nom * np.linspace(0.95, 1.05, 20)).Write()
to_TH1("VBFHH_jesDown", nom / np.linspace(0.95, 1.05, 20)).Write()

nom = 100 * np.exp(-np.linspace(0, 1, 20))
obs += nom
hnom = to_TH1("background", nom)
for i, val in enumerate(nom):
    hnom.SetBinError(i + 1, np.sqrt(val) * 0.1)
hnom.Write()
to_TH1("background_jesUp", nom * np.linspace(0.95, 1.05, 20)).Write()
to_TH1("background_jesDown", nom / np.linspace(0.95, 1.05, 20)).Write()

to_TH1("data_obs", np.round(obs)).Write()

# write a card
with open("card.txt", "w") as fout:
    fout.write(
        """\
Combination of card.txt
imax 1 number of bins
jmax 1 number of processes minus 1
kmax 3 number of nuisance parameters
----------------------------------------------------------------------------------------------------------------------------------
shapes *    ch1  shapes.root $PROCESS $PROCESS_$SYSTEMATIC
----------------------------------------------------------------------------------------------------------------------------------
bin          ch1
observation  -1
----------------------------------------------------------------------------------------------------------------------------------
bin                               ch1         ch1
process                           VBFHH       background
process                           0           1
rate                              -1          -1
----------------------------------------------------------------------------------------------------------------------------------
bgnorm                  lnN       -           1.3
jes                     shape     1.0         1.0
lumi                    lnN       1.02        1.02
* autoMCStats 0
"""
    )

subprocess.call("text2workspace.py card.txt".split(" "))
fcard = ROOT.TFile.Open("card.root")
w = fcard.Get("w")

scaling = array2vector_2d(
    np.array(
        [
            [
                3.303536746664150e00,
                -8.541709820382220e00,
                4.235348320712800e00,
                2.296464188467882e01,
                -1.107996258835088e01,
                5.504469544697623e00,
            ],
            [
                2.206443321428910e00,
                -7.076836641962523e00,
                4.053185685866683e00,
                2.350989689214267e01,
                -1.308569222837996e01,
                7.502346155380032e00,
            ],
            [
                2.323314512827915e00,
                -9.040565356058327e00,
                6.135410429832603e00,
                3.597836755817654e01,
                -2.387500375686657e01,
                1.625863529518014e01,
            ],
            [
                5.925805332888091e-01,
                -3.139640204484572e00,
                1.976422909655008e00,
                1.713589230378096e01,
                -1.051500934722200e01,
                6.627980447033357e00,
            ],
            [
                3.505170703269003e-01,
                -2.237551781735236e00,
                1.483246407331564e00,
                1.484170437843385e01,
                -9.493221195626012e00,
                6.302831691298613e00,
            ],
            [
                2.334740816002986e-01,
                -1.799815305424720e00,
                1.225734691240980e00,
                1.440275907010786e01,
                -9.473328823485497e00,
                6.458585723630323e00,
            ],
            [
                1.959374052725543e-01,
                -1.757624939190617e00,
                1.257071800464856e00,
                1.626453309470772e01,
                -1.127433100208976e01,
                8.089297781650776e00,
            ],
            [
                1.865040295194290e-01,
                -1.822069966644771e00,
                1.391201452068932e00,
                1.849884116334009e01,
                -1.360944960795888e01,
                1.039529105220993e01,
            ],
            [
                9.726648808697150e-02,
                -1.169327097322687e00,
                8.635283997541450e-01,
                1.459008882076805e01,
                -1.037926824643990e01,
                7.682778579161866e00,
            ],
            [
                8.780552015079510e-02,
                -1.156467907936071e00,
                9.032722960981284e-01,
                1.589008007570035e01,
                -1.189269332401088e01,
                9.313892275846490e00,
            ],
            [
                2.006114827320551e-01,
                -2.776793529232688e00,
                2.335437756631023e00,
                3.912099794229794e01,
                -3.232054661687562e01,
                2.720219535392458e01,
            ],
            [
                5.179066270217598e-02,
                -8.550833654170061e-01,
                6.753041305320768e-01,
                1.482948643635128e01,
                -1.117147343869588e01,
                8.821228248108168e00,
            ],
            [
                5.095452842967559e-02,
                -9.482107499527080e-01,
                7.561787601252029e-01,
                1.825692153880631e01,
                -1.408060600559859e01,
                1.123739992361621e01,
            ],
            [
                1.801729907958822e-02,
                -4.102710173962256e-01,
                2.950547079487041e-01,
                9.828612567782274e00,
                -6.724075992501888e00,
                4.831954737036956e00,
            ],
            [
                2.762233787081839e-02,
                -6.400852678490596e-01,
                5.127706114146487e-01,
                1.546123935330864e01,
                -1.188156027745066e01,
                9.528888176590677e00,
            ],
            [
                3.165499001015300e-02,
                -7.790988142691099e-01,
                6.486071576135261e-01,
                1.986193598270219e01,
                -1.597020317079789e01,
                1.330779868219462e01,
            ],
            [
                1.316620750610005e-02,
                -3.821583465978776e-01,
                2.914985575363581e-01,
                1.167177892863827e01,
                -8.480579644763935e00,
                6.457533731506537e00,
            ],
            [
                2.886802887767344e-02,
                -8.369930524359994e-01,
                7.103796160970196e-01,
                2.491187028333814e01,
                -2.057801184441048e01,
                1.746851224928310e01,
            ],
            [
                2.930989281275648e-02,
                -9.242683589392606e-01,
                7.918145320034853e-01,
                2.981526833971985e01,
                -2.501001674094063e01,
                2.144036290322020e01,
            ],
            [
                5.160360892358020e-02,
                -1.673006024492507e00,
                1.526329404862879e00,
                5.506880032083917e01,
                -4.949344845658728e01,
                4.515984622267106e01,
            ],
        ]
    )
)

kv, k2v, kl = (
    w.factory("kv[1, 0, 2]"),
    w.factory("k2v[1, 0, 2]"),
    w.factory("kl[1, 0, 2]"),
)

w.Import(
    ROOT.CMSInterferenceFunc(
        "ch1_vbfhh_morph",
        "",
        w.var("CMS_th1x"),
        ROOT.RooArgList(
            w.factory("expr('@0*@1', kv, kl)"),
            w.factory("expr('@0*@0', kv)"),
            k2v,
        ),
        list(range(21)),
        scaling,
    ),
    ROOT.RooFit.RecycleConflictNodes(),
)
func = w.function("ch1_vbfhh_morph")
print(func.getVal())

histfunc = w.function("shapeSig_ch1_VBFHH_morph")
histfunc.injectExternalMorph(func)

fout = ROOT.TFile("card_morph.root", "recreate")
w.Write()
fout.Close()

subprocess.call(
    "combine -M MultiDimFit card_morph.root --redefineSignalPOIs kv,k2v,kl --freezeParameters r  --setParameters r=1,kv=1,k2v=1,kl=1 -t 100".split(" ")
)
